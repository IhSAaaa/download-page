

services:
  # Backend service
  backend:
    build: .
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=url_shortener
      - DB_SSLMODE=disable
      - GIN_MODE=release
      - APP_URL=http://localhost:8080
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - url-shortener-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Testing service for backend
  backend-test:
    build: 
      context: .
      dockerfile: Dockerfile.test
    environment:
      - DB_HOST=postgres-test
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=url_shortener_test
      - DB_SSLMODE=disable
      - GIN_MODE=test
    depends_on:
      postgres-test:
        condition: service_healthy
    networks:
      - url-shortener-network
    profiles:
      - test
    volumes:
      - ./tests:/app/tests
      - ./coverage:/app/coverage

  # Test database service
  postgres-test:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=url_shortener_test
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - url-shortener-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d url_shortener_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    profiles:
      - test
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend service
  frontend:
    build: ./frontend
    ports:
      - "4000:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - url-shortener-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Frontend testing service
  frontend-test:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.test
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./frontend/coverage:/app/coverage
    networks:
      - url-shortener-network
    profiles:
      - test

  # Database service
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=url_shortener
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - url-shortener-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d url_shortener"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   restart: unless-stopped
  #   networks:
  #     - url-shortener-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 256M
  #       reservations:
  #         memory: 128M

volumes:
  postgres-data:
    driver: local

networks:
  url-shortener-network:
    driver: bridge 